{"ast":null,"code":"var _jsxFileName = \"/Users/sarvin/development/projects/geoparty-frontend/src/trivia/containers/FlashCardFront.js\";\nimport React, { useContext } from 'react';\nimport shopContext from '../../context/shop-context';\nimport { Card, Button, Transition } from 'semantic-ui-react';\nimport { isEmpty } from 'lodash';\n\nconst FlashCardFront = () => {\n  const context = useContext(shopContext);\n\n  const answers = () => {\n    if (isEmpty(context.activeQuestion)) {\n      return ['', '', '', ''];\n    } else {\n      return context.activeQuestion.shuffled_answers;\n    }\n  };\n\n  const flipCard = () => {\n    context.setVisible(false);\n    setTimeout(() => context.setShowAnswer(true), 900);\n  };\n\n  const checkAnswer = answer => {\n    return answer === context.activeQuestion.correct_answer ? true : false;\n  };\n\n  const handleAction = answer => {\n    flipCard();\n    context.setAnswered(true);\n\n    if (checkAnswer(answer)) {\n      context.setCorrect(true);\n      context.incrementProgress();\n\n      if (!isEmpty(context.user)) {\n        context.saveScore(context.user, true);\n      }\n    } else {\n      context.setCorrect(false);\n\n      if (!isEmpty(context.user)) {\n        context.saveScore(context.user, false);\n      }\n    }\n  };\n\n  return React.createElement(Transition.Group, {\n    animation: 'horizontal flip',\n    duration: 1000,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, context.visible && React.createElement(Card, {\n    id: \"flash-card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Card.Content, {\n    className: \"flashcard-question-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Card.Description, {\n    className: \"flashcard-question\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, context.activeQuestion.question)), React.createElement(Card.Content, {\n    id: \"card-button-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Button, {\n    id: \"card-button-one\",\n    inverted: true,\n    color: \"pink\",\n    onClick: () => handleAction(answers()[0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"A \", answers()[0]), React.createElement(Button, {\n    id: \"card-button-two\",\n    inverted: true,\n    color: \"blue\",\n    onClick: () => handleAction(answers()[1]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"B \", answers()[1]), React.createElement(Button, {\n    id: \"card-button-three\",\n    inverted: true,\n    color: \"violet\",\n    onClick: () => handleAction(answers()[2]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"C \", answers()[2]), React.createElement(Button, {\n    id: \"card-button-four\",\n    inverted: true,\n    color: \"purple\",\n    onClick: () => handleAction(answers()[3]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"D \", answers()[3]))));\n};\n\nexport default FlashCardFront;","map":{"version":3,"sources":["/Users/sarvin/development/projects/geoparty-frontend/src/trivia/containers/FlashCardFront.js"],"names":["React","useContext","shopContext","Card","Button","Transition","isEmpty","FlashCardFront","context","answers","activeQuestion","shuffled_answers","flipCard","setVisible","setTimeout","setShowAnswer","checkAnswer","answer","correct_answer","handleAction","setAnswered","setCorrect","incrementProgress","user","saveScore","visible","question"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport shopContext from '../../context/shop-context'\nimport { Card, Button, Transition } from 'semantic-ui-react'\nimport { isEmpty } from 'lodash'\n\nconst FlashCardFront = () => {\n  const context = useContext(shopContext)\n\n  const answers = () => {\n    if(isEmpty(context.activeQuestion)) {\n      return ['', '', '', '']\n    } else {\n      return context.activeQuestion.shuffled_answers\n    }\n  }\n\n  const flipCard = () => {\n    context.setVisible(false)\n    setTimeout( () => (context.setShowAnswer(true)), 900)\n  }\n\n  const checkAnswer = (answer) => {\n    return answer === context.activeQuestion.correct_answer ? true : false\n  }\n\n  const handleAction = (answer) => {\n    flipCard()\n    context.setAnswered(true)\n    if (checkAnswer(answer)){\n      context.setCorrect(true)\n      context.incrementProgress()\n      if (!isEmpty(context.user)) {\n        context.saveScore(context.user, true)\n      }\n    } else {\n      context.setCorrect(false)\n      if (!isEmpty(context.user)) {\n      context.saveScore(context.user, false)\n      }\n    }\n  }\n\n  return(\n    <Transition.Group animation={'horizontal flip'} duration={1000}>\n      { context.visible &&\n      <Card id=\"flash-card\">\n        <Card.Content className='flashcard-question-container'>\n          <Card.Description className='flashcard-question'>{context.activeQuestion.question}</Card.Description>\n        </Card.Content>\n        <Card.Content id='card-button-container'>\n          <Button id='card-button-one' inverted color='pink' onClick={() => handleAction(answers()[0])}>A {answers()[0]}</Button>\n\n          <Button id='card-button-two' inverted color='blue' onClick={() => handleAction(answers()[1])}>B {answers()[1]}</Button>\n\n          <Button id='card-button-three' inverted color='violet' onClick={() => handleAction(answers()[2])}>C {answers()[2]}</Button>\n\n          <Button id='card-button-four' inverted color='purple' onClick={() => handleAction(answers()[3])}>D {answers()[3]}</Button>\n        </Card.Content>\n      </Card>\n      }\n    </Transition.Group>\n  )\n}\n\nexport default FlashCardFront\n"]},"metadata":{},"sourceType":"module"}