{"ast":null,"code":"import _slicedToArray from \"/Users/sarvin/development/projects/geoparty/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sarvin/development/projects/geoparty/client/src/context/GlobalState.js\";\nimport React, { useState } from 'react';\nimport ShopContext from './shop-context';\n\nconst GlobalState = props => {\n  const _useState = useState('overview'),\n        _useState2 = _slicedToArray(_useState, 2),\n        activeItem = _useState2[0],\n        setActiveItem = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        activeQuestion = _useState4[0],\n        setActiveQuestion = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        answered = _useState6[0],\n        setAnswered = _useState6[1];\n\n  const _useState7 = useState('world.jpg'),\n        _useState8 = _slicedToArray(_useState7, 2),\n        avatar = _useState8[0],\n        setAvatar = _useState8[1];\n\n  const _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        bio = _useState10[0],\n        setBio = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        correct = _useState12[0],\n        setCorrect = _useState12[1];\n\n  const _useState13 = useState(false),\n        _useState14 = _slicedToArray(_useState13, 2),\n        loading = _useState14[0],\n        setLoading = _useState14[1];\n\n  const _useState15 = useState(false),\n        _useState16 = _slicedToArray(_useState15, 2),\n        modalStatus = _useState16[0],\n        setModalStatus = _useState16[1];\n\n  const _useState17 = useState(0),\n        _useState18 = _slicedToArray(_useState17, 2),\n        percentage = _useState18[0],\n        setPercentage = _useState18[1];\n\n  const _useState19 = useState([]),\n        _useState20 = _slicedToArray(_useState19, 2),\n        previousQuestions = _useState20[0],\n        setPreviousQuestions = _useState20[1];\n\n  const _useState21 = useState([]),\n        _useState22 = _slicedToArray(_useState21, 2),\n        questions = _useState22[0],\n        setQuestions = _useState22[1];\n\n  const _useState23 = useState(0),\n        _useState24 = _slicedToArray(_useState23, 2),\n        questionIndex = _useState24[0],\n        setQuestionIndex = _useState24[1];\n\n  const _useState25 = useState(false),\n        _useState26 = _slicedToArray(_useState25, 2),\n        showAnswer = _useState26[0],\n        setShowAnswer = _useState26[1];\n\n  const _useState27 = useState(0),\n        _useState28 = _slicedToArray(_useState27, 2),\n        starAmount = _useState28[0],\n        setStarAmount = _useState28[1];\n\n  const _useState29 = useState({}),\n        _useState30 = _slicedToArray(_useState29, 2),\n        user = _useState30[0],\n        setUser = _useState30[1];\n\n  const _useState31 = useState(true),\n        _useState32 = _slicedToArray(_useState31, 2),\n        visible = _useState32[0],\n        setVisible = _useState32[1];\n\n  const fetchQuestions = () => {\n    setLoading(true);\n    fetch('http://localhost:3000/questions/get_trivia').then(res => res.json()).then(questions => {\n      setQuestions(questions.results);\n      setActiveQuestion(questions.results[0]);\n      setLoading(false);\n    });\n  };\n\n  const authenticatingUser = (username, password) => {\n    fetch('/login', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.authenticated) {\n        setUser(data.user);\n        setStarAmount(Math.floor(data.user.correct_answers / 10));\n        setPercentage(data.user.correct_answers % 10 * 10);\n        setAvatar(data.user.avatar);\n        setBio(data.user.bio);\n        localStorage.setItem('token', data.token);\n      } else {\n        alert('Incorrect username or password');\n      }\n    });\n  };\n\n  const authenticatingToken = token => {\n    fetch('/verify_token', {\n      headers: {\n        \"Authentication\": \"Bearer \".concat(token)\n      }\n    }).then(res => res.json()).then(user => {\n      setUser(user);\n      setStarAmount(Math.floor(user.correct_answers / 10));\n      setPercentage(user.correct_answers % 10 * 10);\n      setAvatar(user.avatar);\n      setBio(user.bio);\n    });\n  };\n\n  const logoutUser = () => {\n    setUser({});\n    setPercentage(0);\n    setStarAmount(0);\n    localStorage.removeItem('token');\n  };\n\n  const saveScore = (user, bool) => {\n    let correct_answers;\n    bool ? correct_answers = user.correct_answers + 1 : correct_answers = user.correct_answers;\n    fetch(\"/users/\".concat(user.id), {\n      method: 'PATCH',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        total_questions: user.total_questions + 1,\n        correct_answers: correct_answers\n      })\n    });\n  }; // sets the activeQuestion to the next index in the questions array, then updates questionIndex to match the new activeQuestion\n\n\n  const handleQuestionIndex = () => {\n    setActiveQuestion(questions[questionIndex + 1]);\n    setQuestionIndex(questionIndex + 1);\n  };\n\n  const addPreviousQuestion = (question, correct) => {\n    question.correct = correct;\n    setPreviousQuestions([...previousQuestions, question]);\n  };\n\n  const incrementProgress = () => {\n    let newProgress = percentage + 10;\n\n    if (newProgress >= 100) {\n      newProgress = 0;\n      incrementStarBar();\n    }\n\n    setPercentage(newProgress);\n  };\n\n  const incrementStarBar = () => {\n    setStarAmount(starAmount + 1);\n  };\n\n  return React.createElement(ShopContext.Provider, {\n    value: {\n      activeItem,\n      activeQuestion,\n      addPreviousQuestion,\n      answered,\n      authenticatingUser,\n      authenticatingToken,\n      avatar,\n      bio,\n      correct,\n      handleQuestionIndex,\n      incrementProgress,\n      incrementStarBar,\n      fetchQuestions,\n      loading,\n      logoutUser,\n      modalStatus,\n      percentage,\n      previousQuestions,\n      questions,\n      questionIndex,\n      saveScore,\n      setActiveItem,\n      setAnswered,\n      setAvatar,\n      setBio,\n      setCorrect,\n      setModalStatus,\n      setShowAnswer,\n      setVisible,\n      showAnswer,\n      starAmount,\n      user,\n      visible\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default GlobalState;","map":{"version":3,"sources":["/Users/sarvin/development/projects/geoparty/client/src/context/GlobalState.js"],"names":["React","useState","ShopContext","GlobalState","props","activeItem","setActiveItem","activeQuestion","setActiveQuestion","answered","setAnswered","avatar","setAvatar","bio","setBio","correct","setCorrect","loading","setLoading","modalStatus","setModalStatus","percentage","setPercentage","previousQuestions","setPreviousQuestions","questions","setQuestions","questionIndex","setQuestionIndex","showAnswer","setShowAnswer","starAmount","setStarAmount","user","setUser","visible","setVisible","fetchQuestions","fetch","then","res","json","results","authenticatingUser","username","password","method","headers","body","JSON","stringify","data","authenticated","Math","floor","correct_answers","localStorage","setItem","token","alert","authenticatingToken","logoutUser","removeItem","saveScore","bool","id","Accept","total_questions","handleQuestionIndex","addPreviousQuestion","question","incrementProgress","newProgress","incrementStarBar","children"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ShopContext from './shop-context'\n\nconst GlobalState = props => {\n  const [activeItem, setActiveItem] = useState('overview')\n  const [activeQuestion, setActiveQuestion] = useState({})\n  const [answered, setAnswered] = useState(false)\n  const [avatar, setAvatar] = useState('world.jpg')\n  const [bio, setBio] = useState('')\n  const [correct, setCorrect] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [modalStatus, setModalStatus] = useState(false)\n  const [percentage, setPercentage] = useState(0)\n  const [previousQuestions, setPreviousQuestions] = useState([])\n  const [questions, setQuestions] = useState([])\n  const [questionIndex, setQuestionIndex] = useState(0)\n  const [showAnswer, setShowAnswer] = useState(false)\n  const [starAmount, setStarAmount] = useState(0)\n  const [user, setUser] = useState({})\n  const [visible, setVisible] = useState(true)\n\n  const fetchQuestions = () => {\n    setLoading(true)\n    fetch('http://localhost:3000/questions/get_trivia')\n    .then(res => res.json())\n    .then(questions => {\n      setQuestions(questions.results)\n      setActiveQuestion(questions.results[0])\n      setLoading(false)\n    })\n  }\n\n  const authenticatingUser = (username, password) => {\n    fetch('/login', {\n      method: \"POST\",\n      headers:{\"Content-Type\":\"application/json\", \"Accept\": \"application/json\"},\n      body:JSON.stringify({\n        username: username,\n        password: password\n      })\n    })\n    .then(res => res.json())\n    .then(data => {\n      if (data.authenticated) {\n        setUser(data.user)\n        setStarAmount(Math.floor(data.user.correct_answers / 10))\n        setPercentage((data.user.correct_answers % 10) * 10)\n        setAvatar(data.user.avatar)\n        setBio(data.user.bio)\n        localStorage.setItem('token', data.token)\n      } else {\n        alert('Incorrect username or password')\n      }\n    })\n  }\n\n  const authenticatingToken = (token) => {\n    fetch('/verify_token', {\n      headers:{\"Authentication\": `Bearer ${token}`}\n    })\n    .then(res => res.json())\n    .then(user => {\n      setUser(user)\n      setStarAmount(Math.floor(user.correct_answers / 10))\n      setPercentage((user.correct_answers % 10) * 10)\n      setAvatar(user.avatar)\n      setBio(user.bio)\n    })\n  }\n\n  const logoutUser = () => {\n    setUser({})\n    setPercentage(0)\n    setStarAmount(0)\n    localStorage.removeItem('token')\n  }\n\n  const saveScore = (user, bool) => {\n    let correct_answers\n    bool ?\n    correct_answers = user.correct_answers + 1\n    :\n    correct_answers = user.correct_answers\n    fetch(`/users/${user.id}`, {\n      method: 'PATCH',\n      headers: {\"Content-Type\":\"application/json\", Accept:\"application/json\"},\n      body: JSON.stringify({\n        total_questions: user.total_questions + 1,\n        correct_answers: correct_answers\n      })\n    })\n  }\n\n  // sets the activeQuestion to the next index in the questions array, then updates questionIndex to match the new activeQuestion\n  const handleQuestionIndex = () => {\n    setActiveQuestion(questions[questionIndex + 1])\n    setQuestionIndex(questionIndex + 1)\n  }\n\n  const addPreviousQuestion = (question, correct) => {\n    question.correct = correct\n    setPreviousQuestions([...previousQuestions, question])\n  }\n\n  const incrementProgress = () => {\n    let newProgress = percentage + 10\n    if(newProgress >= 100){\n      newProgress = 0\n      incrementStarBar()\n    }\n    setPercentage(newProgress)\n  }\n\n  const incrementStarBar = () => {\n    setStarAmount(starAmount + 1)\n  }\n\n  return(\n    <ShopContext.Provider\n      value={{\n        activeItem,\n        activeQuestion,\n        addPreviousQuestion,\n        answered,\n        authenticatingUser,\n        authenticatingToken,\n        avatar,\n        bio,\n        correct,\n        handleQuestionIndex,\n        incrementProgress,\n        incrementStarBar,\n        fetchQuestions,\n        loading,\n        logoutUser,\n        modalStatus,\n        percentage,\n        previousQuestions,\n        questions,\n        questionIndex,\n        saveScore,\n        setActiveItem,\n        setAnswered,\n        setAvatar,\n        setBio,\n        setCorrect,\n        setModalStatus,\n        setShowAnswer,\n        setVisible,\n        showAnswer,\n        starAmount,\n        user,\n        visible\n      }}>\n      { props.children }\n    </ShopContext.Provider>\n  )\n}\n\nexport default GlobalState\n"]},"metadata":{},"sourceType":"module"}